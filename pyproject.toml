[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "case_study"
version = "0.0.1"
description = "Experimentation tools on top of OSP simulation models."
readme = "README.rst"
requires-python = ">= 3.10.10"
keywords = ["simulation","model","FMI","OSP"]
license = {file = "LICENSE"}
authors = [
    {name = "Siegfried Eisinger", email = "Siegfried.Eisinger@DNV.com"},
]
maintainers = [
    {name = "Siegfried Eisinger", email = "Siegfried.Eisinger@DNV.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    # "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Environment :: Console",
    "Intended Audience :: Industry",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "numpy>=1.24.2",
    "libcosimpy",
    "fmpy",
    # "some_project_in_my_local_dev @ file:../some_project_in_my_local_dev",
    # "some_project_on_github @ git+https://github.com/user/project.git@version_or_tag_or_branch_name#egg=project_name",
]

[project.urls]
Homepage = "https://github.com/dnv-innersource/case_study"
Documentation = "https://dnv-innersource.github.io/case_study/README.html"
Repository = "https://github.com/dnv-innersource/m.git"
Issues = "https://github.com/dnv-innersource/case_study/issues"
Changelog = "https://github.com/dnv-innersource/case_study/blob/main/CHANGELOG.md"

[project.scripts]
case_study = "case_study.cli.case:main"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["test*"]

src = ["src"]
line-length = 120
target-version = "py310"

[tool.ruff]
    exclude = [
        ".git",
        ".venv",
        ".tox",
        "build",
        "dist",
        "__pycache__",
        "./docs/source/conf.py",
#        "./src/folder_to_be_ignored",
    ]

    lint.ignore = [
        "E501",  # Line length too long
        "D100",  # Missing docstring in public module
        "D101",  # Missing docstring in public class
        "D102",  # Missing docstring in public method
        "D103",  # Missing docstring in public function
        "D104",  # Missing docstring in public package
        "D105",  # Missing docstring in magic method
        "D107",  # Missing docstring in __init__
        "D202",  # No blank lines allowed after function docstring
        "D203",  # 1 blank line required before class docstring
        "D205",  # 1 blank line required between summary line and description
        "D212",  # Multi-line docstring summary should start at the first line
        "D213",  # Multi-line docstring summary should start at the second line
        # "N802",  # Function name should be lowercase  (uncomment if you want to allow Uppercase function names)
        # "N803",  # Argument name should be lowercase  (uncomment if you want to allow Uppercase argument names)
        "N806",  # Variable in function should be lowercase  (uncomment if you want to allow Uppercase variable names in functions)
        # "N815",  # Variable in class scope should not be mixedCase  (uncomment if you want to allow mixedCase variable names in class scope)
        # "N816",  # Variable in global scope should not be mixedCase  (uncomment if you want to allow mixedCase variable names in global scope)
        ]
    lint.select = [
        "E",
        "D",
        "F",
        "N",
        "W",
        "I",
        "B",
    ]

    [tool.ruff.lint.pep8-naming]
    ignore-names = [
        "test_*",
        "setUp",
        "tearDown",
    ]

    [tool.ruff.lint.pydocstyle]
    convention = "numpy"

    [tool.ruff.lint.per-file-ignores]
    "__init__.py" = ["I001"]
    "./tests/*" = ["D"]

    [tool.ruff.format]
    docstring-code-format = true

[tool.pyright]
exclude = [
    ".git",
    ".venv",
    ".tox",
    "build",
    "dist",
    "**/__pycache__",
    "./docs/source/conf.py",
#    "./src/folder_to_be_ignored",
]

extraPaths = ["./src"]
typeCheckingMode = "basic"
useLibraryCodeForTypes = true
reportMissingParameterType = "error"
reportUnknownParameterType = "warning"
reportUnknownMemberType = "warning"
reportMissingTypeArgument = "error"
reportPropertyTypeMismatch = "error"
reportFunctionMemberAccess = "warning"
reportPrivateUsage = "warning"
reportTypeCommentUsage = "warning"
reportIncompatibleMethodOverride = "warning"
reportIncompatibleVariableOverride = "error"
reportInconsistentConstructor = "error"
reportOverlappingOverload = "warning"
reportUninitializedInstanceVariable = "warning"
reportCallInDefaultInitializer = "warning"
reportUnnecessaryIsInstance = "information"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnusedCallResult = "warning"
reportUnusedExpression = "warning"
reportMatchNotExhaustive = "warning"
reportShadowedImports = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "warning"
# Activate the following rules only locally and temporary, i.e. for a QA session.
# (For server side CI they are considered too strict.)
# reportConstantRedefinition = "warning"
# reportUnnecessaryTypeIgnoreComment = "information"
# reportImportCycles = "warning"
# reportImplicitStringConcatenation = "warning"
